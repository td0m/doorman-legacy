// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: entities.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Entities_Create_FullMethodName   = "/doorman.Entities/Create"
	Entities_Retrieve_FullMethodName = "/doorman.Entities/Retrieve"
	Entities_List_FullMethodName     = "/doorman.Entities/List"
	Entities_Update_FullMethodName   = "/doorman.Entities/Update"
	Entities_Delete_FullMethodName   = "/doorman.Entities/Delete"
)

// EntitiesClient is the client API for Entities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntitiesClient interface {
	Create(ctx context.Context, in *EntitiesCreateRequest, opts ...grpc.CallOption) (*Entity, error)
	Retrieve(ctx context.Context, in *EntitiesRetrieveRequest, opts ...grpc.CallOption) (*Entity, error)
	List(ctx context.Context, in *EntitiesListRequest, opts ...grpc.CallOption) (*EntitiesListResponse, error)
	Update(ctx context.Context, in *EntitiesUpdateRequest, opts ...grpc.CallOption) (*Entity, error)
	Delete(ctx context.Context, in *EntitiesDeleteRequest, opts ...grpc.CallOption) (*EntitiesDeleteResponse, error)
}

type entitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitiesClient(cc grpc.ClientConnInterface) EntitiesClient {
	return &entitiesClient{cc}
}

func (c *entitiesClient) Create(ctx context.Context, in *EntitiesCreateRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, Entities_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Retrieve(ctx context.Context, in *EntitiesRetrieveRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, Entities_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) List(ctx context.Context, in *EntitiesListRequest, opts ...grpc.CallOption) (*EntitiesListResponse, error) {
	out := new(EntitiesListResponse)
	err := c.cc.Invoke(ctx, Entities_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Update(ctx context.Context, in *EntitiesUpdateRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, Entities_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitiesClient) Delete(ctx context.Context, in *EntitiesDeleteRequest, opts ...grpc.CallOption) (*EntitiesDeleteResponse, error) {
	out := new(EntitiesDeleteResponse)
	err := c.cc.Invoke(ctx, Entities_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitiesServer is the server API for Entities service.
// All implementations must embed UnimplementedEntitiesServer
// for forward compatibility
type EntitiesServer interface {
	Create(context.Context, *EntitiesCreateRequest) (*Entity, error)
	Retrieve(context.Context, *EntitiesRetrieveRequest) (*Entity, error)
	List(context.Context, *EntitiesListRequest) (*EntitiesListResponse, error)
	Update(context.Context, *EntitiesUpdateRequest) (*Entity, error)
	Delete(context.Context, *EntitiesDeleteRequest) (*EntitiesDeleteResponse, error)
	mustEmbedUnimplementedEntitiesServer()
}

// UnimplementedEntitiesServer must be embedded to have forward compatible implementations.
type UnimplementedEntitiesServer struct {
}

func (UnimplementedEntitiesServer) Create(context.Context, *EntitiesCreateRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEntitiesServer) Retrieve(context.Context, *EntitiesRetrieveRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedEntitiesServer) List(context.Context, *EntitiesListRequest) (*EntitiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEntitiesServer) Update(context.Context, *EntitiesUpdateRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEntitiesServer) Delete(context.Context, *EntitiesDeleteRequest) (*EntitiesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEntitiesServer) mustEmbedUnimplementedEntitiesServer() {}

// UnsafeEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntitiesServer will
// result in compilation errors.
type UnsafeEntitiesServer interface {
	mustEmbedUnimplementedEntitiesServer()
}

func RegisterEntitiesServer(s grpc.ServiceRegistrar, srv EntitiesServer) {
	s.RegisterService(&Entities_ServiceDesc, srv)
}

func _Entities_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Create(ctx, req.(*EntitiesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Retrieve(ctx, req.(*EntitiesRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).List(ctx, req.(*EntitiesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Update(ctx, req.(*EntitiesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entities_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntitiesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitiesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entities_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitiesServer).Delete(ctx, req.(*EntitiesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entities_ServiceDesc is the grpc.ServiceDesc for Entities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doorman.Entities",
	HandlerType: (*EntitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Entities_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Entities_Retrieve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Entities_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Entities_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Entities_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entities.proto",
}
