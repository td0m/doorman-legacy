// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: relations.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relations_Create_FullMethodName   = "/doorman.Relations/Create"
	Relations_Retrieve_FullMethodName = "/doorman.Relations/Retrieve"
	Relations_List_FullMethodName     = "/doorman.Relations/List"
	Relations_Update_FullMethodName   = "/doorman.Relations/Update"
	Relations_Delete_FullMethodName   = "/doorman.Relations/Delete"
)

// RelationsClient is the client API for Relations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationsClient interface {
	Create(ctx context.Context, in *RelationsCreateRequest, opts ...grpc.CallOption) (*Relation, error)
	Retrieve(ctx context.Context, in *RelationsRetrieveRequest, opts ...grpc.CallOption) (*Relation, error)
	List(ctx context.Context, in *RelationsListRequest, opts ...grpc.CallOption) (*RelationsListResponse, error)
	Update(ctx context.Context, in *RelationsUpdateRequest, opts ...grpc.CallOption) (*Relation, error)
	Delete(ctx context.Context, in *RelationsDeleteRequest, opts ...grpc.CallOption) (*RelationsDeleteResponse, error)
}

type relationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationsClient(cc grpc.ClientConnInterface) RelationsClient {
	return &relationsClient{cc}
}

func (c *relationsClient) Create(ctx context.Context, in *RelationsCreateRequest, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, Relations_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Retrieve(ctx context.Context, in *RelationsRetrieveRequest, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, Relations_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) List(ctx context.Context, in *RelationsListRequest, opts ...grpc.CallOption) (*RelationsListResponse, error) {
	out := new(RelationsListResponse)
	err := c.cc.Invoke(ctx, Relations_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Update(ctx context.Context, in *RelationsUpdateRequest, opts ...grpc.CallOption) (*Relation, error) {
	out := new(Relation)
	err := c.cc.Invoke(ctx, Relations_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationsClient) Delete(ctx context.Context, in *RelationsDeleteRequest, opts ...grpc.CallOption) (*RelationsDeleteResponse, error) {
	out := new(RelationsDeleteResponse)
	err := c.cc.Invoke(ctx, Relations_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationsServer is the server API for Relations service.
// All implementations must embed UnimplementedRelationsServer
// for forward compatibility
type RelationsServer interface {
	Create(context.Context, *RelationsCreateRequest) (*Relation, error)
	Retrieve(context.Context, *RelationsRetrieveRequest) (*Relation, error)
	List(context.Context, *RelationsListRequest) (*RelationsListResponse, error)
	Update(context.Context, *RelationsUpdateRequest) (*Relation, error)
	Delete(context.Context, *RelationsDeleteRequest) (*RelationsDeleteResponse, error)
	mustEmbedUnimplementedRelationsServer()
}

// UnimplementedRelationsServer must be embedded to have forward compatible implementations.
type UnimplementedRelationsServer struct {
}

func (UnimplementedRelationsServer) Create(context.Context, *RelationsCreateRequest) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRelationsServer) Retrieve(context.Context, *RelationsRetrieveRequest) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedRelationsServer) List(context.Context, *RelationsListRequest) (*RelationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRelationsServer) Update(context.Context, *RelationsUpdateRequest) (*Relation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRelationsServer) Delete(context.Context, *RelationsDeleteRequest) (*RelationsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationsServer) mustEmbedUnimplementedRelationsServer() {}

// UnsafeRelationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationsServer will
// result in compilation errors.
type UnsafeRelationsServer interface {
	mustEmbedUnimplementedRelationsServer()
}

func RegisterRelationsServer(s grpc.ServiceRegistrar, srv RelationsServer) {
	s.RegisterService(&Relations_ServiceDesc, srv)
}

func _Relations_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Create(ctx, req.(*RelationsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Retrieve(ctx, req.(*RelationsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).List(ctx, req.(*RelationsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Update(ctx, req.(*RelationsUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relations_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relations_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationsServer).Delete(ctx, req.(*RelationsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relations_ServiceDesc is the grpc.ServiceDesc for Relations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doorman.Relations",
	HandlerType: (*RelationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Relations_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Relations_Retrieve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Relations_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Relations_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Relations_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relations.proto",
}
